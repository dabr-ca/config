# Pleroma instance configuration
# vim: ft=elixir:

import Config

config :pleroma, Pleroma.Web.Endpoint,
   url: [host: "dabr.ca", scheme: "https", port: 443],
   http: [ip: {0, 0, 0, 0}, port: 4000]

config :pleroma, Pleroma.Web.Plugs.RemoteIp,
  enabled: true,
  proxies: ["10.0.0.0/8"]

config :pleroma, :instance,
  name: "dabr.ca",
  email: "webmaster@dabr.ca",
  notify_email: "no-reply@dabr.ca",
  healthcheck: true,
  limit: 5000,
  description_limit: 5000,
  remote_limit: 100_000,
  upload_limit: 16 * 1024 * 1024,
  avatar_upload_limit: 2 * 1024 * 1024,
  background_upload_limit: 4 * 1024 * 1024,
  banner_upload_limit: 4 * 1024 * 1024,
  registrations_open: false,
  invites_enabled: true,
  static_dir: "/var/lib/pleroma/static"

config :pleroma, :shout,
  enabled: false

config :pleroma, :instances_favicons,
  enabled: true

config :pleroma, :media_proxy,
  enabled: true,
  redirect_on_failure: false,
  base_url: "https://files.dabr.ca"

config :pleroma, Pleroma.Repo,
  adapter: Ecto.Adapters.Postgres,
  ssl: true,
  ssl_opts: [verify: :verify_none],
  username: "pleroma",
  password: "{{ lookup('aws_ssm', '/dabr-ca/postgres/password') }}",
  database: "pleroma",
  hostname: "{{ lookup('aws_ssm', '/dabr-ca/postgres/address') }}"

config :pleroma, :database, rum_enabled: false
config :pleroma, :dangerzone, override_repo_pool_size: true

# Performance tuning
# https://docs-develop.pleroma.social/backend/configuration/postgresql/#disable-generic-query-plans
# https://hexdocs.pm/db_connection/DBConnection.html#start_link/2-queue-config
config :pleroma, Pleroma.Repo,
  prepare: :named,
  pool_size: 12,
  queue_target: 2_000,
  queue_interval: 1_000,
  parameters: [
    application_name: "pleroma",
    plan_cache_mode: "force_custom_plan"
  ]

config :pleroma, Oban,
  repo: Pleroma.Repo,
  queues: [
    federator_outgoing: 3,
    federator_incoming: 2,
    background: 2,
    search_indexing: 1,
    slow: 1,
    web_push: 1
  ],
  plugins: [
    {Oban.Plugins.Pruner, max_age: 86_400}
  ]

# https://docs-develop.pleroma.social/backend/administration/CLI_tasks/config/
# This option enables Admin Interface configuration and shadows all other
# config in this file. Caution should be taken to ensure the consistency
# between the database config and static config.
# ./bin/pleroma_ctl config migrate_to_db
config :pleroma, configurable_from_database: true

# Do not provide FE config from BE
config :pleroma, :frontend_configurations,
  pleroma_fe: %{}

config :pleroma, :frontends, [primary: %{"name" => "pleroma-fe", "ref" => "kazv"}]

# Enable Strict-Transport-Security once SSL is working:
config :pleroma, :http_security,
  enabled: true,
  sts: true

# Configure S3
config :pleroma, Pleroma.Upload,
 uploader: Pleroma.Uploaders.S3,
 base_url: "https://files.dabr.ca",
 filters: [
   Pleroma.Upload.Filter.Exiftool.StripLocation,
   Pleroma.Upload.Filter.Dedupe
 ]

config :pleroma, Pleroma.Uploaders.S3,
  bucket: "{{ lookup('aws_ssm', '/dabr-ca/s3_bucket') }}",
  truncated_namespace: "",
  streaming_enabled: true

# Configure S3 credentials:
config :ex_aws, :s3,
  access_key_id: :instance_role,
  secret_access_key: :instance_role,
  region: "us-west-2"

# Email
# https://docs.pleroma.social/backend/configuration/cheatsheet/#email
config :ex_aws,
  access_key_id: :instance_role,
  secret_access_key: :instance_role,
  region: "us-west-2"

# Email is currently disabled as IAM role is not available
# https://git.pleroma.social/pleroma/pleroma/-/issues/3012
#config :pleroma, Pleroma.Emails.Mailer,
#  enabled: true,
#  adapter: Swoosh.Adapters.ExAwsAmazonSES

# Promethus
config :pleroma, Pleroma.PromEx,
  disabled: false,
  manual_metrics_start_delay: :no_delay,
  drop_metrics_groups: [],
  datasource: "grafanacloud-nobledesk0630-prom",
  grafana: [
    host: "https://nobledesk0630.grafana.net",
    auth_token: "{{ lookup('aws_ssm', '/dabr-ca/grafana_cloud_token') }}",
    upload_dashboards_on_start: true,
    folder_name: "dabr-ca",
    annotate_app_lifecycle: true
  ],
  metrics_server: [
    port: 4021,
    path: "/metrics",
    protocol: :http,
    auth_strategy: :bearer,
    auth_token: "{{ lookup('aws_ssm', '/dabr-ca/prometheus_token') }}",
    pool_size: 5,
    cowboy_opts: []
  ]

# Configure web push notifications
config :web_push_encryption, :vapid_details, subject: "mailto:webmaster@dabr.ca"

# Generate and include secrets
# https://git.pleroma.social/pleroma/pleroma/-/blob/5910d58cf7f468722b3774622b6b40a07b5d6444/config/docker.exs#L31-69
if not File.exists?("/var/lib/pleroma/secret.exs") do
  secret = :crypto.strong_rand_bytes(64) |> Base.encode64() |> binary_part(0, 64)
  signing_salt = :crypto.strong_rand_bytes(8) |> Base.encode64() |> binary_part(0, 8)
  {web_push_public_key, web_push_private_key} = :crypto.generate_key(:ecdh, :prime256v1)

  secret_file =
    EEx.eval_string(
      """
      import Config
      config :pleroma, Pleroma.Web.Endpoint,
        secret_key_base: "<%= secret %>",
        signing_salt: "<%= signing_salt %>"
      config :web_push_encryption, :vapid_details,
        public_key: "<%= web_push_public_key %>",
        private_key: "<%= web_push_private_key %>"
      """,
      secret: secret,
      signing_salt: signing_salt,
      web_push_public_key: Base.url_encode64(web_push_public_key, padding: false),
      web_push_private_key: Base.url_encode64(web_push_private_key, padding: false)
    )

  File.write("/var/lib/pleroma/secret.exs", secret_file)
end

import_config("/var/lib/pleroma/secret.exs")
