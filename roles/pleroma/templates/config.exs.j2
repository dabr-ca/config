# Pleroma instance configuration
# vim: ft=elixir:

import Config

config :pleroma, Pleroma.Web.Endpoint,
   url: [host: "dabr.ca", scheme: "https", port: 443],
   http: [ip: {0, 0, 0, 0}, port: 4000]

config :pleroma, Pleroma.Web.Plugs.RemoteIp,
  enabled: true,
  proxies: ["10.0.0.0/8"]

config :pleroma, :instance,
  name: "dabr.ca",
  email: "wzyboy@wzyboy.org",
  notify_email: "no-reply@dabr.ca",
  healthcheck: true,
  limit: 5000,
  registrations_open: false,
  invites_enabled: true

config :pleroma, :shout,
  enabled: false

config :pleroma, :media_proxy,
  enabled: false,
  redirect_on_failure: true
  #base_url: "https://cache.pleroma.social"

config :pleroma, Pleroma.Repo,
  adapter: Ecto.Adapters.Postgres,
  username: "pleroma",
  password: "{{ lookup('aws_ssm', '/dabr-ca/postgres/password') }}",
  database: "pleroma",
  hostname: "{{ lookup('aws_ssm', '/dabr-ca/postgres/address') }}"

# Configure web push notifications
config :web_push_encryption, :vapid_details, subject: "mailto:wzyboy@wzyboy.org"

config :pleroma, :database, rum_enabled: false
config :pleroma, :instance, static_dir: "/var/lib/pleroma/static"
config :pleroma, Pleroma.Uploaders.Local, uploads: "/var/lib/pleroma/uploads"

# Do not provide FE config from BE
config :pleroma, :frontend_configurations,
  pleroma_fe: %{}

# Enable Strict-Transport-Security once SSL is working:
# config :pleroma, :http_security,
#   sts: true

# Configure S3 support if desired.
# The public S3 endpoint (base_url) is different depending on region and provider,
# consult your S3 provider's documentation for details on what to use.

config :pleroma, Pleroma.Upload,
 uploader: Pleroma.Uploaders.S3,
 base_url: "https://files.dabr.ca",
 filters: [
  Pleroma.Upload.Filter.Dedupe,
  Pleroma.Upload.Filter.AnonymizeFilename,
  Pleroma.Upload.Filter.Exiftool
]

config :pleroma, Pleroma.Uploaders.S3,
  bucket: "{{ lookup('aws_ssm', '/dabr-ca/s3_bucket') }}",
  truncated_namespace: "",
  streaming_enabled: true

# Configure S3 credentials:
config :ex_aws, :s3,
  access_key_id: :instance_role,
  secret_access_key: :instance_role,
  region: "us-west-2"

# For using third-party S3 clones like wasabi, also do:
# config :ex_aws, :s3,
#   host: "s3.wasabisys.com"

# Email
# https://docs.pleroma.social/backend/configuration/cheatsheet/#email
config :ex_aws,
  region: "us-west-2"

#config :pleroma, Pleroma.Emails.Mailer,
#  enabled: true,
#  adapter: Swoosh.Adapters.ExAwsAmazonSES

# Generate and include secrets
# https://github.com/angristan/docker-pleroma/blob/51724af0882b908a18dc12c11fef60eb8308fb3a/config.exs#L37-L62
if not File.exists?("/var/lib/pleroma/secret.exs") do
  secret = :crypto.strong_rand_bytes(64) |> Base.encode64() |> binary_part(0, 64)
  signing_salt = :crypto.strong_rand_bytes(8) |> Base.encode64() |> binary_part(0, 8)
  {web_push_public_key, web_push_private_key} = :crypto.generate_key(:ecdh, :prime256v1)

  secret_file =
    EEx.eval_string(
      """
      import Config
      config :pleroma, Pleroma.Web.Endpoint,
        secret_key_base: "<%= secret %>",
        signing_salt: "<%= signing_salt %>"
      config :web_push_encryption, :vapid_details,
        public_key: "<%= web_push_public_key %>",
        private_key: "<%= web_push_private_key %>"
      """,
      secret: secret,
      signing_salt: signing_salt,
      web_push_public_key: Base.url_encode64(web_push_public_key, padding: false),
      web_push_private_key: Base.url_encode64(web_push_private_key, padding: false)
    )

  File.write("/var/lib/pleroma/secret.exs", secret_file)
end

import_config("/var/lib/pleroma/secret.exs")
